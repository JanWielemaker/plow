:- op(500,xfx,~).

test :-
    not_exists(meta_tu(nn_1~0.4)).

nn_1~0.6.
neg(nn_1)~0.6.

:- table meta_1_tu(_,lattice(join(_X,_Y,_Z))).
%:- table meta_1_tu/2.

meta_tu(A~M) :-
    meta_1_tu(A,M1),
    M1 >= M.

meta_1_tu(A,M):-
    A~M,
    get_complement(A~M,Compl,M_c),
    not_exists(meta_tu(Compl~M_c)).

get_complement(Lit, CompLit, M) :-
    get_nonstruct_complement(Lit, CompLit, M).

get_nonstruct_complement(neg(A)~M,A,M_c):-!,M_c is 1 - M.
get_nonstruct_complement(A~M,neg(A),M_c):-!,M_c is 1 - M.

join(A,B,C):-
     (   A > B
     ->  C = A
     ;   C = B
     ).

		 /*******************************
		 *             SIMPLE		*
		 *******************************/

d :-
%    prolog_debug('MSG_TABLING_NEG'),
%    trace('$tbl_wkl_add_suspension'/2),
    prolog_debug('MSG_TABLING_MERGE'),
    debug(tabling(tnot)),
    debug(tabling(schedule)),
    debug(tabling(answer)).

p :-
    abolish_all_tables,
    p(_X, _Y).

q :-
    abolish_all_tables,
    q(_X, _Y).

:- table p(_,lattice(join(_X,_Y,_Z))).

p(1,X) :-
    my_not_exists(p(1,X)).

:- table q/2.

q(1,X) :-
    my_not_exists(q(1,X)).

my_not_exists(Goal) :-
    (   my_tabled_call(Goal),
        fail
    ;   %tdump(my_tabled_call(_)),
        tnot(my_tabled_call(Goal))
    ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Normal recursion

:- table my_tabled_call/1 as variant, opaque.

my_tabled_call(X) :- call(X).

:- table r(_,lattice(join(_X,_Y,_Z))).

r(1, 1).
r(1, X) :-
    r(1, Y),
    Y < 5,
    X is Y+1.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Mixed AS/normal

:- table p1/2, pas(_,lattice(join(_X,_Y,_Z))).

p1(X, Y) :-
    pas(X, Y).
p1(_, 1).

pas(X, Z) :-
    p1(X, Y),
    Y < 5,
    Z is Y+1.
